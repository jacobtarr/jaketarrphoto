{# Import the checkbox filter #}
{% import '_components/molecules/checkbox-filter.twig' as checkboxFilter %}

{# Retrieve and set default filter values #}
{% if reset is defined %}
  {% set state = '' %}
  {% set season = [] %}
  {% set genre = [] %}
{% else %}
  {# Preserve filter state or set defaults if no filters are set #}
  {% set state = state ?? '' %}
  {% set season = season ?? [] %}
  {% set genre = genre ?? [] %}
{% endif %}

{# Fetch the available categories for filters #}
{% set states = craft.categories.group('state').all() %}
{% set seasons = craft.categories.group('season').all() %}
{% set genres = craft.categories.group('genre').all() %}

<div class="c-portfolio-grid grid grid-cols-4 gap-5 js-photo-grid">

  <div class="c-filter-sidebar col-span-1">
    <div class="c-filter-sidebar__inner space-y-5">
      <div class="flex gap-x-4 relative">
        <h4 class="text-2xl font-semibold">Filters</h4>
        {% if state or season|length > 0 or genre|length > 0 %}
          <button 
            sprig 
            s-val:reset="1" 
            class="o-button c-reset-button"
          >
            <span>Reset Filters</span>
            {% include '_components/atoms/icons/icon-close.svg' %}
          </button>
        {% endif %}
      </div>
      
      <div class="c-filter-box space-y-10">
        
        {# States Filter (select box) #}
        <div class="c-filter-section space-y-5">
          <div class="c-filter-section__title">States</div>
          <div class="c-filter-section__form-group space-y-5">
            <div class="c-select-container">
              <select sprig name="state" class="c-select block w-full form-select" value="{{ state }}">
                <option value="">All States</option>
                {% for stateOption in states %}
                  <option value="{{ stateOption.slug }}" {% if state == stateOption.slug %} selected {% endif %}>
                    {{ stateOption.title }}
                  </option>
                {% endfor %}
              </select>
              <span class="c-select-arrow">
                {% include '_components/atoms/icons/icon-chevron-down.svg' %}
              </span>
            </div>
          </div>
        </div>

        {# Seasons Filter #}
        {{ checkboxFilter.renderFilter('Seasons', seasons, season, 'season') }}

        {# Genres Filter #}
        {{ checkboxFilter.renderFilter('Genres', genres, genre, 'genre') }}
        
      </div>
    </div>
  </div>

  {# Photo Grid #}
  <div class="col-span-3">
    {% set query = craft.entries().section('photos') %}
    {% set relatedConditions = [] %}

    {# Apply state filter if not reset #}
    {% if state and reset is not defined %}
      {% set stateCategory = craft.categories.slug(state).one() %}
      {% if stateCategory %}
        {% set relatedConditions = relatedConditions|merge([{ targetElement: stateCategory, field: 'state' }]) %}
      {% endif %}
    {% endif %}

    {# Apply season filter if not reset #}
    {% if season is not empty and reset is not defined %}
      {% set seasonCategories = season|map(slug => craft.categories.slug(slug).one())|filter(e => e is not empty) %}
      {% for seasonCategory in seasonCategories %}
        {% set relatedConditions = relatedConditions|merge([{ targetElement: seasonCategory, field: 'season' }]) %}
      {% endfor %}
    {% endif %}

    {# Apply genre filter if not reset #}
    {% if genre is not empty and reset is not defined %}
      {% set genreCategories = genre|map(slug => craft.categories.slug(slug).one())|filter(e => e is not empty) %}
      {% for genreCategory in genreCategories %}
        {% set relatedConditions = relatedConditions|merge([{ targetElement: genreCategory, field: 'genre' }]) %}
      {% endfor %}
    {% endif %}

    {% if relatedConditions is not empty %}
      {% set query = query.relatedTo(['and']|merge(relatedConditions)) %}
    {% endif %}

    {% set photoEntries = query.limit(null).all() %}
    {% if photoEntries is not empty %}
      <div class="grid grid-cols-3 gap-5 js-photo-grid">
        {% for photoEntry in photoEntries %}
          <div class="col-span-1 c-photo-block-container">
            {% include '_components/molecules/photo-block.twig' with {
              "photo": {
                "image": photoEntry.featuredImage.one(),
                "url": photoEntry.url,
                "title": photoEntry.title,
                "location": photoEntry.location,
                "transform": 'square'
              }
            } %}
          </div>
        {% endfor %}
      </div>
    {% else %}
      <p>No photos match the current filters.</p>
    {% endif %}
  </div>
</div>
