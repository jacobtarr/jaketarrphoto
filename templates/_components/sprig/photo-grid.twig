{# Import the radio filter #}
{% import '_components/molecules/radio-filter.twig' as radioFilter %}

{# Import the checkbox filter #}
{% import '_components/molecules/checkbox-filter.twig' as checkboxFilter %}

{# Retrieve and set default filter values #}
{% set offset = offset ?? 0 %}
{% set limit = limit ?? 9 %}
{% set nextOffset = offset + limit %}
{% set state = (reset is defined) ? '' : (state ?? '') %}
{% set checkboxFilters = [
  { handle: 'season', selected: season },
  { handle: 'genre', selected: genre }
] %}
{% for filter in checkboxFilters %}
  {% set _ = attribute(_context, filter.handle) is iterable
    ? null
    : craft.app.view.setTemplateVariable(filter.handle, attribute(_context, filter.handle) ? [attribute(_context, filter.handle)] : [])
  %}
{% endfor %}
{% set selectedFilterCount = (state ? 1 : 0) + season|length + genre|length %}
{% set sort = (reset is defined) ? '' : (sort ?? '') %}

{# Fetch the available categories for filters #}
{% set states = craft.categories.group('state').all() %}

<div
  class="c-portfolio md:flex md:flex-col md:gap-12"
  x-data="{
    filterOpen: $persist(false).as('portfolioFilterOpen'),
    toggleBodyScroll(value = this.filterOpen) {
      const isMobile = window.matchMedia('(max-width: 767px)').matches;
      if (isMobile) {
        document.body.classList.toggle('overflow-hidden', value);
      } else {
        document.body.classList.remove('overflow-hidden');
      }
    }
  }"
>

  <s-replace>
    {% set portfolioHeroImageData = craft.app.config.getConfigFromFile('portfolioHeroImageData') %}
    {% set portfolioHero = portfolioHeroImageData[state] ?? portfolioHeroImageData[''] %}

    {% include '_patterns/hero/hero.twig' with {
      hero: {
        classes: 'c-hero--small',
        image: portfolioHero.image,
        heading: 'Portfolio',
        headingClasses: 'test df',
        secondary_heading: portfolioHero.heading
      }
    } %}
  </s-replace>

  <div class="container space-y-5">
    <div class="c-filter-nav">
      <div class="hidden md:flex items-center gap-x-5 relative">
        {% include '_components/heading/heading.twig' with {
          heading: {
            text: 'Filters',
            tag: 'h4',
            classes: 'font-semibold',
          }
        } %}
        {% set hasSelections = checkboxFilters|filter(f => f.selected|length > 0)|length > 0 %}
        {% if state or hasSelections %}
          <div>
            {% include '_components/molecules/reset-button.twig' with {
              limit: limit,
              selectedFilterCount: selectedFilterCount
            } %}
          </div>
        {% endif %}
      </div>
      <div class="c-filter-nav__col c-filter-nav__mobile-buttons">
        {% include '_components/button/button.twig' with {
          button: {
            text: 'Filters' ~ (selectedFilterCount > 0 ? ' (' ~ selectedFilterCount ~ ')' : ''),
            icon: 'filter',
            tag: 'button',
            classes: 'justify-between',
            attrs: {
              '@click': 'filterOpen = true'
            }
          }
        } %}
      </div>

      <div class="c-filter-nav__col c-filter-nav__sort-by">
        <h4 class="text-2xl font-semibold hidden md:block">Sort by</h4>
        <div>
          {% include '_components/select/select.twig' with {
            select: {
              name: 'sort',
              selected: sort,
              prepend_text: 'Sort by:',
              options: [
                { value: '', label: 'Newest First' },
                { value: 'oldest', label: 'Oldest First' },
                { value: 'titleAsc', label: 'Title (A–Z)' },
                { value: 'titleDesc', label: 'Title (Z–A)' }
              ],
              classes: 'c-select--sort-by',
              icon: 'sort-by',
            }
          } %}
        </div>
      </div>
      {# end .c-portfolio__sort-by-section #}
    </div>
    <div class="c-portfolio-grid grid md:grid-cols-4 gap-4 md:gap-5">

      {# start .c-filter-sidebar #}
      <div
        x-show="filterOpen"
        x-transition:enter="transition-opacity ease-in duration-50"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition-opacity ease-in duration-175 delay-75"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 bg-black/90 z-[90] md:hidden"
        @click="filterOpen = false"
      >
      </div>
      <div
        x-show="filterOpen"
        x-transition:enter="transition transform ease-in duration-175 delay-50"
        x-transition:enter-start="-translate-x-full"
        x-transition:enter-end="translate-x-0"
        x-transition:leave="transition transform ease-in duration-175"
        x-transition:leave-start="translate-x-0"
        x-transition:leave-end="-translate-x-full"
        class="c-filter-sidebar"
        @click.outside="filterOpen = false"
      >
        <div class="c-filter-box-container" @click.stop>
          <div class="c-filter-box">
            <div class="c-filter-box__mobile-nav">
              {% include '_components/heading/heading.twig' with {
                heading: {
                  text: 'Filters',
                  tag: 'h4',
                  classes: 'o-heading--h2 font-semibold',
                }
              } %}
              {% set hasSelections = checkboxFilters|filter(f => f.selected|length > 0)|length > 0 %}
              {% if state or hasSelections %}
                <div>
                  {% include '_components/molecules/reset-button.twig' with {
                    limit: limit,
                    selectedFilterCount: selectedFilterCount
                  } %}
                </div>
              {% endif %}
            </div>
            {# end .c-filter-box__mobile-nav #}

            <div class="c-filter-sections-wrapper">
              <form id="filters-form" class="c-filter-sections-container">
                <div
                  class="c-filter-sections"
                >
                  {% set allStates = [{ title: 'All States', slug: '' }] | merge(states) %}
                  
                  {# Prepare s-val extras (exclude checkbox filters to avoid duplication) #}
                  {% set checkboxFilterHandles = checkboxFilters|map(f => f.handle) %}
                  {% set extraVals = {
                    'season': season,
                    'genre': genre,
                    'offset': offset,
                    'limit': limit,
                    'sort': sort
                  }|filter((val, key) => key not in checkboxFilterHandles) %}
                  {{ radioFilter.renderFilter(
                    'States',
                    allStates,
                    state,
                    'state',    
                    limit,
                    sort,
                    extraVals
                  ) }}
                  {% for filter in checkboxFilters %}
                    {% set categories = craft.categories.group(filter.handle).all() %}
                    {% set checkboxExtras = {} %}
                    {% for filter in checkboxFilters %}
                      {% set checkboxExtras = checkboxExtras
                        | merge(
                            filter.selected|map(s => { ('s-val:' ~ filter.handle ~ '[]'): s })|reduce((a, b) => a|merge(b), {})
                          ) %}
                    {% endfor %}

                    {% set extraAttrs = {
                      's-val:limit': limit,
                      's-val:sort': sort,
                      'formSelector': '#filters-form'
                    } | merge(checkboxExtras) %}

                    {{ checkboxFilter.renderFilter(
                      filter.handle|capitalize ~ 's',
                      categories,
                      filter.selected,
                      filter.handle,
                      extraAttrs
                    ) }}
                  {% endfor %}
                  

                </div>{# end .c-filter-sections #}
              </form>{# end #filters-form #}
              <div
                x-data="{
                  resultsCount: 0,
                  updateCount() {
                    const el = document.getElementById('results-count');
                    this.resultsCount = el ? parseInt(el.value) : 0;
                  }
                }"
                x-init="updateCount()"
                class="c-filter-box__footer"
              >
                {% include '_components/button/button.twig' with {
                  button: {
                    tag: 'button',
                    classes: 'c-button--primary w-full justify-center text-center',
                    attrs: {
                      type: 'submit',
                      '@click': 'filterOpen = false',
                      'x-text': '\'Show \' + resultsCount + \' Result\' + (resultsCount === 1 ? \'\' : \'s\')'
                    }
                  }
                } %}
              </div>
            </div>{# end .c-filter-sections-wrapper #}

          </div>{# end .c-filter-box #}
        </div>{# end .c-filter-box-container #}
      </div>{# end .c-filter-sidebar #}
      
      <div class="c-portfolio__results col-span-1 md:col-span-3" x-data='{"sort": {{ sort|default('')|json_encode|raw }} }'>
        {% set sortOptions = {
          'oldest': 'postDate ASC',
          'titleAsc': 'title ASC',
          'titleDesc': 'title DESC'
        } %}
        {% set query = craft.entries().section('photos').orderBy(sortOptions[sort] ?? 'postDate DESC') %}
        
        {% set relatedConditions = [] %}

        {# Handle radio filter for state #}
        {% if state %}
          {% set category = craft.categories.slug(state).one() %}
          {% if category %}
            {% set relatedConditions = relatedConditions|merge([
              { targetElement: category, field: 'state' }
            ]) %}
          {% endif %}
        {% endif %}

        {# Handle checkbox filters #}
        {% for filter in checkboxFilters %}
          {% set selectedSlugs = filter.selected %}
          {% if selectedSlugs|length %}
            {% set cats = craft.categories().group(filter.handle).slug(selectedSlugs).all() %}
            {% if cats|length %}
              {% set relatedConditions = relatedConditions|merge([
                {
                  field: filter.handle,
                  targetElement: cats
                }
              ]) %}
            {% endif %}
          {% endif %}
        {% endfor %}

        {% if relatedConditions|length %}
          {% set query = query.relatedTo(['and']|merge(relatedConditions)) %}
        {% endif %}

        {% set total = query.count() %}
        {% set entries = query.offset(offset).limit(limit).all() %}
        {% set isLastPage = nextOffset >= total %}
        <input type="hidden" id="results-count" value="{{ total }}">

        {% if entries|length %}
          <div id="photo-grid" class="c-portfolio-grid grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-3 gap-2 md:gap-3">
            {% for photoEntry in entries %}
              <div class="col-span-1 c-photo-block-container">
                {% include '_components/photo-block/photo-block.twig' with {
                  "photo": {
                    "image": photoEntry.featuredImage.one(),
                    "url": photoEntry.url,
                    "title": photoEntry.title,
                    "caption": photoEntry.title,
                    "transform": 'squareMedium'
                  }
                } %}
              </div>
            {% endfor %}
          </div>
        {% else %}
          {% include '_components/alert/alert.twig' with {
            alert: {
              text: 'No photos match the current filters.',
              attrs: {
                role: 'alert',
                'aria-live': 'polite'
              }
            }
          } %}
        {% endif %}

        <div id="load-more-wrapper"
          class="c-portfolio-grid__footer"
        >
          {% if not isLastPage %}
            {% include '_components/button/button.twig' with {
              button: {
                text: 'Load More',
                tag: 'button',
                variant: 'secondary',
                classes: 'c-button--arrow-down',
              }
            } %}
          {% endif %}
        </div>
      </div>{# end .c-portfolio__results #}

    </div>
  </div>

  
  
</div>